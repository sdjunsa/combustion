import numpy as np  # NumPy 라이브러리를 불러옵니다. C의 배열/행렬 연산을 위한 라이브러리입니다.

# -------------------------
# 파라미터 설정 (예시 값)
# -------------------------
rho_f = 1.2         # 유체 밀도 (kg/m^3)
C_pf = 1005.0       # 유체 비열 (J/(kg·K))
v = 2.0             # 유체 속도 (m/s)
L = 1.0             # 구간 길이 (m)
dt = 1.0            # 시간 간격 (s)

M_m = 50.0          # 재생기 매트릭스(고체)의 질량 (kg)
C_pm = 800.0        # 재생기 매트릭스의 비열 (J/(kg·K))

alpha = 50.0        # 열전달 계수 (W/(m^2·K))
A = 5.0             # 접촉 면적 (m^2)

T_f_in = 300.0      # 유입 유체 온도 (K)
T_f_prev = 320.0    # 이전 시간 단계 유체 온도 (K)
T_s_prev = 400.0    # 이전 시간 단계 고체 온도 (K)

# -------------------------------------------
# 함수 F(x)를 정의합니다.
# F(x)는 잔차 벡터를 반환하는 함수로,
# x[0]는 새로운 유체 온도 T_f, x[1]는 새로운 고체 온도 T_s 입니다.
# -------------------------------------------
def F(x):
    T_f, T_s = x  # 배열 x의 첫번째 요소는 T_f, 두번째는 T_s로 분리합니다.
    
    # 유체 에너지 평형 방정식:
    # rho_f * C_pf * ( v*(T_f - T_f_in)/L + (T_f - T_f_prev)/dt ) - alpha*A*(T_s - T_f) = 0
    # 유체 내부의 시간 변화 항과 공간 변화 항에 의한 에너지 변화와 고체와의 열 교환 항을 고려합니다.
    f1 = rho_f * C_pf * ( v * (T_f - T_f_in) / L + (T_f - T_f_prev) / dt ) - alpha * A * (T_s - T_f)
    
    # 고체(재생기 매트릭스)의 에너지 평형 방정식:
    # M_m * C_pm * ((T_s - T_s_prev)/dt) - alpha*A*(T_f - T_s) = 0
    # 고체의 온도 변화 항과 유체와의 열 교환 항을 고려합니다.
    f2 = M_m * C_pm * ((T_s - T_s_prev) / dt) - alpha * A * (T_f - T_s)
    
    # 두 방정식의 결과를 NumPy 배열로 반환합니다.
    return np.array([f1, f2])

# -------------------------------------------
# 야코비안(Jacobian) 행렬을 수치 미분을 통해 계산하는 함수입니다.
# 야코비안은 다변수 함수의 편미분 계수를 모은 행렬로, 각 변수별 변화량을 나타냅니다.
# -------------------------------------------
def jacobian(F, x, h=1e-4):
    n = len(x)  # 변수의 개수 (여기서는 2개)
    J = np.zeros((n, n))  # n x n 크기의 제로 행렬을 생성합니다.
    f0 = F(x)  # 현재 점 x에서의 함수 값을 계산합니다.
    # 각 변수에 대해 편미분을 계산합니다.
    for i in range(n):
        x1 = np.copy(x)  # x의 복사본을 만듭니다.
        x1[i] += h       # i번째 변수에 아주 작은 값 h를 더합니다.
        f1 = F(x1)       # 수정된 점에서의 함수 값을 계산합니다.
        # 중앙 차분법(여기서는 순방향 차분)을 이용하여 편미분 값을 구합니다.
        J[:, i] = (f1 - f0) / h  
    return J  # 계산된 야코비안 행렬을 반환합니다.

# -------------------------------------------
# 다변수 뉴턴-랩슨(Newton-Raphson) 방법을 사용하여 비선형 방정식 시스템을 푸는 함수입니다.
# -------------------------------------------
def newton_raphson_system(F, x0, tol=1e-6, max_iter=50):
    x = np.array(x0, dtype=float)  # 초기 추정값을 부동소수점형 NumPy 배열로 변환합니다.
    # 최대 max_iter 만큼 반복합니다.
    for i in range(max_iter):
        f_val = F(x)  # 현재 x에서의 함수 F(x)를 계산합니다.
        norm_f = np.linalg.norm(f_val, ord=2)  # F(x)의 유클리드(2-노름) 값을 계산합니다.
        
        # 현재 반복 횟수, x 값, 함수 값, 그리고 F(x)의 노름을 출력합니다.
        print(f"Iteration {i}: x = {x}, F = {f_val}, ||F|| = {norm_f:.3e}")
        
        # 수렴 조건: F(x)의 노름이 tol보다 작으면 충분히 근사되었다고 판단합니다.
        if norm_f < tol:
            return x, i  # 현재의 x와 반복 횟수를 반환합니다.
        
        # 현재 x에서의 야코비안 행렬을 계산합니다.
        J = jacobian(F, x)
        
        try:
            # 선형 시스템 J * delta = -F(x)를 풀어 delta를 구합니다.
            # C의 경우 행렬 라이브러리 함수를 사용하여 풀 수 있습니다.
            delta = np.linalg.solve(J, -f_val)
        except np.linalg.LinAlgError:
            # 만약 야코비안 행렬이 특이(singular)하다면 에러 메시지를 출력하고 종료합니다.
            print("Jacobian is singular. Try a different initial guess.")
            break
        
        # x의 새로운 값을 delta를 더해 업데이트합니다.
        x = x + delta
        
        # 만약 delta의 크기가 tol보다 작으면 수렴했다고 판단하여 종료합니다.
        if np.linalg.norm(delta, ord=2) < tol:
            return x, i+1
    # 최대 반복 횟수를 초과하면 현재 값을 반환합니다.
    return x, max_iter

# -------------------------------------------
# 초기 추정값을 설정합니다. 여기서는 이전 시간 단계의 온도를 사용합니다.
# -------------------------------------------
x0 = [T_f_prev, T_s_prev]

# 뉴턴-랩슨 방법을 호출하여 방정식 시스템의 해 (새로운 T_f와 T_s)를 구합니다.
solution, iterations = newton_raphson_system(F, x0)

# 최종적으로 구해진 해와 반복 횟수를 출력합니다.
print(f"\nFinal solution: T_f = {solution[0]:.6f} K, T_s = {solution[1]:.6f} K (Iterations: {iterations})")
